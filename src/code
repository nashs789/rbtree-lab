// RB tree Insert 의사코드
insert(T, z)       // T: tree, z: new node
    y = nil[T]     // y는 node를 타고 내려면서 이전 node를 저장 (insert 위치)
    x = root[T]    // x를 root node로 설정

    while x != nil[T]    // leaf node 까지 반복
        do y = x         
            // 새로운 node key와 x node의 키 비교 후 적절한 위치
            // left, right 판단
            if key[z] < key[x]
                then x = left[x]
            else
                x = right[x]

    p[z] = y    // 새로운 node의 parent는 y node

    // 1. y가 leaf node 인 경우 새로운 node가 root node가 된다.
    // 2. z의 값이 y의 값보다 작다면 y의 left node는 z가 된다.
    // 3. 위 조건이 아니라면 y의 right node는 z가 된다.
    if y == nil[T]
        then root[T] = z
    else if key[z] < key[y]
        then left[y] = z
    else
        right[y] = z

    // new noded의 leaf node 설정 및 RED로 색 배정
    left[z] = nil[T]
    right[z] = nil[T]
    color[z] = RED
    
    RB_Fixup()


// RB tree Left-Rotate 의사코드
left_rotate(T, x)         // T: tree, z: new node
    y = right[x]          // y를 x의 right node로 만든다.
    right[x] = left[y]    // y의 left node를 x의 right node로 만든다.
    p[left[y]] = x        // y의 left node의 부모를 x로 설정한다.
    p[y] = p[x]           // y의 parent node를 x의 parent node로 설정한다.

    // 1. x의 부모가 nil node인 경우 y를 root node로 설정한다.
    // 2. x가 x부모의 left node면 y가 x 부모의 left node가 되고,
    // 3. x가 x부모의 right node면 y가 x 부모의 right node가 된다.
    if p[x] == nil[T]
        then root[T] = y
    else if x == left[p[x]]
        then left[p[x]] = y
    else
        right[p[x]] = y

    left[y] = x    // y의 left node는 x가 된다.
    p[x] = y       // x의 paernt node는 y가 된다.